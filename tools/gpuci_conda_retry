#!/bin/bash

# gpuci_conda_retry - wrapper for conda that retries the command after a CondaHTTPError
# or ChecksumMismatchError (ideally, any conda error that is normally resolved
# by retrying).

# This must be set in order for the script to recognize failing exit codes when
# output is piped to tee
set -o pipefail

condaretry_help="
gpuci_conda_retry options:

   --condaretry_max_retries=n      Retry the conda command at most n times (default is 3)
   --condaretry_sleep_interval=n   Sleep n seconds between retries (default is 5)

==========
"
max_retries=3
sleep_interval=5
exitcode=0
needToRetry=0
retries=0
args=""

# Temporarily set this to something else (eg. a script called "testConda" that
# prints "CondaHTTPError:" and exits with 1) for testing this script.
#condaCmd=./testConda
condaCmd=${CONDA_EXE:=conda}

# Function to output messages to stderr
# FIXME - extend `gpuci_logger` or make another script for this
function echo_stderr {
    echo "    [gpuci_conda_retry] $@" >&2
}

# Function to run conda and check output for specific retryable errors
# input variables:
#    condaCmd: the command used for running conda, which accepts the args
#              passed to this script
#    outfile: file to tee output to for checking, likely a temp file
# output variables:
#    exitcode: the exit code from running ${condaCmd} ${args}
#    needToRetry: 1 if the command should be retried, 0 if it should not be
function runConda {
    ${condaCmd} ${args} 2>&1| tee ${outfile}
    exitcode=$?
    needToRetry=0
    retryingMsg=""

    if (( ${exitcode} != 0 )); then
        # Show exit code
        echo_stderr "conda returned exit code: ${exitcode}"

        if grep -q CondaHTTPError: ${outfile}; then
            retryingMsg="Retrying, found 'CondaHTTPError:' in output..."
            needToRetry=1
        elif grep -q ChecksumMismatchError: ${outfile}; then
            retryingMsg="Retrying, found 'ChecksumMismatchError:' in output..."
            needToRetry=1
        elif grep -q JSONDecodeError: ${outfile}; then
            retryingMsg="Retrying, found 'JSONDecodeError:' in output..."
            needToRetry=1
        else
            echo_stderr "Exiting, no retryable conda errors detected: 'ChecksumMismatchError:' or 'CondaHTTPError:' or 'JSONDecodeError:'"
        fi

        if (( ${needToRetry} == 1 )) && \
           (( ${retries} >= ${max_retries} )); then
            # Catch instance where we run out of retries
            echo_stderr "Exiting, reached max retries..."
        else
            # Give reason for retry
            echo_stderr $retryingMsg
        fi
fi
}


# Process and remove args recognized only by this script, save others for conda
# Process help separately
for arg in $*; do
   opt=${arg%%=*}
   val=${arg##*=}
   if [[ ${opt} == "--help" ]] || [[ ${opt} == "-h" ]]; then
      echo "${condaretry_help}"
      ${condaCmd} --help
      exit $?
   elif [[ ${opt} == "--condaretry_max_retries" ]]; then
      max_retries=${val}
   elif [[ ${opt} == "--condaretry_sleep_interval" ]]; then
      sleep_interval=${val}
   else
      args="${args} ${arg}"
   fi
done

# Run command
outfile=$(mktemp)
runConda ${args}

# Retry loop, only if needed
while (( ${needToRetry} == 1 )) && \
      (( ${retries} < ${max_retries} )); do

   retries=$(expr ${retries} + 1)
   echo_stderr "Waiting, retry ${retries} of ${max_retries} -> sleeping for ${sleep_interval} seconds..."
   sleep ${sleep_interval}
   echo_stderr "Starting, retry ${retries} of ${max_retries} -> sleep done..."

   runConda ${args}
done

rm -f ${outfile}
exit ${exitcode}
